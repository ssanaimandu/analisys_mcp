# 워크플로우의 이름
name: Publish Docker image to Docker Hub

# 워크플로우 실행 조건: 새로운 릴리스가 생성될 때
on:
  release:
    types: [created]

# 실행될 작업(job) 목록
jobs:
  build-and-push:
    # 작업이 실행될 환경 (최신 Ubuntu)
    runs-on: ubuntu-latest
    
    # 작업의 단계(step)들
    steps:
      # 1. 소스 코드 체크아웃
      #    - 현재 리포지토리의 코드를 runner 환경으로 가져옵니다.
      - name: Check out the repo
        uses: actions/checkout@v4

      # 2. Docker Hub 로그인
      #    - GitHub Secrets에 저장된 사용자 이름과 토큰을 사용하여 Docker Hub에 로그인합니다.
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 3. Docker 이미지 태그 및 레이블 메타데이터 추출
      #    - 릴리스 태그(e.g., v1.0.0)를 기반으로 Docker 이미지 태그를 자동으로 생성합니다.
      #    - 예: v1.0.0 -> 'your-username/analisys-mcp:1.0.0', 'your-username/analisys-mcp:1.0', 'your-username/analisys-mcp:latest'
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/analisys-mcp  # Docker Hub 이미지 이름 (리포지토리 이름의 '_'를 '-'로 변경)

      # 4. Docker 이미지 빌드 및 Docker Hub에 푸시
      #    - Buildx를 사용하여 이미지를 빌드하고, 추출된 메타데이터(태그)를 적용하여 푸시합니다.
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .          # Dockerfile이 있는 위치 (리포지토리 루트)
          push: true          # 빌드 후 푸시 활성화
          tags: ${{ steps.meta.outputs.tags }}      # 'meta' 단계에서 생성된 태그 사용
          labels: ${{ steps.meta.outputs.labels }}  # 'meta' 단계에서 생성된 레이블 사용
